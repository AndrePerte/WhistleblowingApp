@model WhistleblowingApp.Models.Segnalazione

@{
    ViewData["Title"] = "Whistleblowing - Dettagli Segnalazione";
}

<div class="container mt-4">
    <h2>Whistleblowing - Segnalazione condotte illecite</h2>

    <!-- Informazioni generali -->
    <div class="row mb-3">
        <div class="col-md-6">
            <p><strong>Data Segnalazione:</strong> @Model.DataCreazione.ToString("dd-MM-yyyy HH:mm")</p>
        </div>
        <div class="col-md-6 text-end">
            <p><strong>Stato:</strong> @Model.Stato</p>
        </div>
    </div>

    <!-- Riepilogo Segnalazione -->
    <div class="card mb-4">
        <div class="card-body">
            <h5>Riepilogo Segnalazione</h5>
            <hr />
            <p><strong>Descrizione:</strong></p>
            <p>@(string.IsNullOrEmpty(Model.Descrizione) ? "Nessuna descrizione fornita" : Model.Descrizione)</p>

            <hr />
            <p><strong>Persone Coinvolte:</strong></p>
            @if (!string.IsNullOrWhiteSpace(Model.PersoneCoinvolte))
            {
                <ul>
                    @foreach (var persona in Model.PersoneCoinvolte.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
                    {
                        <li>@persona.Trim()</li>
                    }
                </ul>
            }
            else
            {
                <p>Nessun dato disponibile.</p>
            }

            <hr />
            <p><strong>Altri a Conoscenza:</strong></p>
            @if (!string.IsNullOrWhiteSpace(Model.AltriAConoscenza))
            {
                <ul>
                    @foreach (var persona in Model.AltriAConoscenza.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
                    {
                        <li>@persona.Trim()</li>
                    }
                </ul>
            }
            else
            {
                <p>Nessun dato disponibile.</p>
            }

            <hr />
            <p><strong>Data Illecito:</strong> @(Model.DataIllecito.HasValue ? Model.DataIllecito.Value.ToString("dd-MM-yyyy HH:mm") : "Non specificata")</p>

            <hr />
            <p><strong>Rischio Ritorsione:</strong> @(Model.RischioRitorsione ? "Sì" : "No")</p>

            <hr />
            <p><strong>Pericolo Imminente:</strong> @(Model.PericoloImminente ? "Sì" : "No")</p>
        </div>
    </div>

    <div class="card mb-4">
        <div class="card-header">
            <h4 class="my-0 font-weight-normal">Allegati</h4>
        </div>
        <div class="card-body">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Nome File</th>
                        <th>Data di caricamento</th>
                        <th>Tipo</th>
                        <th>Dimensione File</th>
                        <th>Azioni</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var allegato in Model.Allegati.OrderByDescending(a => a.DataCaricamento))
                    {
                        <tr>
                            <td>
                            <a href="/@allegato.FilePath" target="_blank">@allegato.NomeFile</a>
                        </td>
                            <td>@allegato.DataCaricamento.ToString("dd-MM-yyyy HH:mm")</td>
                            <td>@allegato.TipoMime.Split('/').Last()</td>
                            <td>@(allegato.Dimensione / 1024) KB</td>
                            
                            <td>
                                <form asp-action="DeleteAttachment" method="post" style="display:inline;">
                                    <input type="hidden" name="id" value="@allegato.Id" />
                                    <button type="submit" class="btn btn-danger btn-sm">Cancella</button>
                                </form>
                            </td>
                            
                        </tr>
                    }
                </tbody>
            </table>
            <form asp-action="CaricaFile" method="post" enctype="multipart/form-data" class="mt-3">
                <input type="hidden" name="segnalazioneId" value="@Model.Id" />
                <div class="mb-3">
                    <label for="fileUpload">Carica un file (massimo 25 MB)</label>
                    <input type="file" id="fileUpload" name="file" accept=".png,.jpg,.jpeg" class="form-control" />
                    <p class="text-muted">Max File size: 25 MB</p>
                    <button type="submit" class="btn btn-primary mt-2">Carica</button>
                </div>
            </form>

            @if (!string.IsNullOrEmpty(TempData?.Peek("NomeFile") as string))
            {
                <div class="mt-2 text-success">
                    File caricato: @TempData["NomeFile"]
                </div>
            }
        </div>
    </div>

    <!-- Sezione Chat -->
    <div class="card mb-4">
        <div class="card-header">
            <h5>Chat con Operatore</h5>
        </div>
        <div class="card-body">
            <!-- Area chat -->
            <div id="chatBox" style="max-height: 300px; overflow-y: auto; border: 1px solid #ccc; padding: 10px; background-color: #f9f9f9;">
                @foreach (var messaggio in Model.MessaggiChat.OrderBy(m => m.DataInvio))
                {
                    <div class="d-flex flex-column @(messaggio.Mittente == "Utente" ? "align-items-end" : "") mb-2">
                        <strong>@(messaggio.Mittente)</strong>
                        <span class="bg-@(messaggio.Mittente == "Utente" ? "success text-white" : "light") p-2 rounded">
                            @messaggio.Testo
                        </span>
                    </div>
                }
            </div>

            <!-- Form per rispondere -->
            <form asp-action="InviaMessaggio" id="chatForm" method="post" class="mt-3 d-flex">
                <input type="hidden" name="segnalazioneId" value="@Model.Id" />
                <input type="text" name="testo" class="form-control me-2" placeholder="Scrivi una risposta..." required />
                <button type="submit" class="btn btn-success">Invia</button>
            </form>
        </div>
    </div>

    @section Scripts {
    <script>
        document.getElementById("chatForm")?.addEventListener("submit", async function (e) {
            e.preventDefault();

            const formData = new FormData(this);
            const url = this.getAttribute("action");

            const response = await fetch(url, {
                method: "POST",
                body: new URLSearchParams(formData)
            });

            if (response.ok) {
                location.reload();
            }
            else {
                alert("Errore durante l'invio del messaggio");
            }
        });
    </script>
    }

</div>